/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#include "packet_header.h"
#include "e2p_access.h"

// Message Group "generic"
// =======================
// MessageGroupID: 0
// Description: This group contains messages useful for different devices.


// Message "generic_genericack"
// ----------------------------
// MessageGroupID: 0
// MessageID: 0
// MessageType: 0
// Data fields: SenderID, PacketCounter
// length: 116 bits (needs 15 bytes)

// Function to initialize header for the message.
static inline void pkg_header_init_generic_genericack(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagegroupid(0);
  pkg_header_set_messageid(0);
  pkg_header_set_messagetype(0);
}

// Function to set CRC value after all data fields are set.
static inline void pkg_header_crc32_generic_genericack(void)
{
  pkg_header_set_crc32(crc32(bufx + 4, 12));
}

// Set SenderID (UIntValue)
// byte 10, bit 0, length bits 12, min val 0, max val 4095
static inline void msg_generic_genericack_set_senderid(uint32_t val)
{
  array_write_UIntValue(10, 0, 12, val, bufx);
}

// Set PacketCounter (UIntValue)
// byte 11, bit 4, length bits 24, min val 0, max val 16777215
static inline void msg_generic_genericack_set_packetcounter(uint32_t val)
{
  array_write_UIntValue(11, 4, 24, val, bufx);
}


// Message "generic_batterystatus"
// -------------------------------
// MessageGroupID: 0
// MessageID: 5
// MessageType: 0
// Data fields: Percentage
// length: 87 bits (needs 11 bytes)

// Function to initialize header for the message.
static inline void pkg_header_init_generic_batterystatus(void)
{
  memset(&bufx[0], 0, sizeof(bufx));
  pkg_header_set_messagegroupid(0);
  pkg_header_set_messageid(5);
  pkg_header_set_messagetype(0);
}

// Function to set CRC value after all data fields are set.
static inline void pkg_header_crc32_generic_batterystatus(void)
{
  pkg_header_set_crc32(crc32(bufx + 4, 12));
}

// Set Percentage (UIntValue)
// byte 10, bit 0, length bits 7, min val 0, max val 100
static inline void msg_generic_batterystatus_set_percentage(uint32_t val)
{
  array_write_UIntValue(10, 0, 7, val, bufx);
}

