/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _PACKET_HEADER_H
#define _PACKET_HEADER_H

#include "util.h"
#include "e2p_access.h"

// Set CRC32 (UIntValue)
// byte 0, bit 0, length bits 32, min val 0, max val 4294967295
static inline void pkg_header_set_crc32(uint32_t val)
{
  array_write_UIntValue(0, 0, 32, val, bufx);
}

// Set SenderID (UIntValue)
// byte 4, bit 0, length bits 12, min val 0, max val 4095
static inline void pkg_header_set_senderid(uint32_t val)
{
  array_write_UIntValue(4, 0, 12, val, bufx);
}

// Set PacketCounter (UIntValue)
// byte 5, bit 4, length bits 24, min val 0, max val 16777215
static inline void pkg_header_set_packetcounter(uint32_t val)
{
  array_write_UIntValue(5, 4, 24, val, bufx);
}

// Set MessageGroupID (UIntValue)
// byte 8, bit 4, length bits 4, min val 0, max val 15
static inline void pkg_header_set_messagegroupid(uint32_t val)
{
  array_write_UIntValue(8, 4, 4, val, bufx);
}

// Set MessageID (UIntValue)
// byte 9, bit 0, length bits 7, min val 0, max val 127
static inline void pkg_header_set_messageid(uint32_t val)
{
  array_write_UIntValue(9, 0, 7, val, bufx);
}

// Set MessageType (EnumValue)
// byte 9, bit 7, length bits 1

typedef enum {
  MESSAGETYPE_STATUS = 0,
  MESSAGETYPE_REQUEST = 1
} MessageTypeEnum;
static inline void pkg_header_set_messagetype(MessageTypeEnum val)
{
  array_write_UIntValue(9, 7, 1, val, bufx);
}


// overall length: 80 bits

#endif /* _PACKET_HEADER_H */
