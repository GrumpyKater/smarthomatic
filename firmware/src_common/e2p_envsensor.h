/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013..2014 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_ENVSENSOR_H
#define _E2P_ENVSENSOR_H

// E2P Block "EnvSensor"
// =====================
// Start offset (bit): 512
// Overall block length: 7680 bits

// TemperatureSensorType (EnumValue)
// Description: You can choose one of the supported temperature / humidity sensors.

typedef enum {
  TEMPERATURESENSORTYPE_NOSENSOR = 0,
  TEMPERATURESENSORTYPE_SHT15 = 1,
  TEMPERATURESENSORTYPE_DS7505 = 2,
  TEMPERATURESENSORTYPE_BMP085 = 3
} TemperatureSensorTypeEnum;

// Set TemperatureSensorType (EnumValue)
// Byte offset: 64, bit offset: 0, length bits 8
static inline void e2p_envsensor_set_temperaturesensortype(TemperatureSensorTypeEnum val)
{
  eeprom_write_UIntValue(64, 0, 8, val);
}

// Get TemperatureSensorType (EnumValue)
// Byte offset: 64, bit offset: 0, length bits 8
static inline TemperatureSensorTypeEnum e2p_envsensor_get_temperaturesensortype(void)
{
  return eeprom_read_UIntValue8(64, 0, 8, 0, 255);
}

// HumiditySensorType (EnumValue)
// Description: You can choose one of the supported air humidity sensors.

typedef enum {
  HUMIDITYSENSORTYPE_NOSENSOR = 0,
  HUMIDITYSENSORTYPE_SHT15 = 1
} HumiditySensorTypeEnum;

// Set HumiditySensorType (EnumValue)
// Byte offset: 65, bit offset: 0, length bits 8
static inline void e2p_envsensor_set_humiditysensortype(HumiditySensorTypeEnum val)
{
  eeprom_write_UIntValue(65, 0, 8, val);
}

// Get HumiditySensorType (EnumValue)
// Byte offset: 65, bit offset: 0, length bits 8
static inline HumiditySensorTypeEnum e2p_envsensor_get_humiditysensortype(void)
{
  return eeprom_read_UIntValue8(65, 0, 8, 0, 255);
}

// BarometricSensorType (EnumValue)
// Description: You can choose one of the supported barometric pressure sensors.

typedef enum {
  BAROMETRICSENSORTYPE_NOSENSOR = 0,
  BAROMETRICSENSORTYPE_BMP085 = 1
} BarometricSensorTypeEnum;

// Set BarometricSensorType (EnumValue)
// Byte offset: 66, bit offset: 0, length bits 8
static inline void e2p_envsensor_set_barometricsensortype(BarometricSensorTypeEnum val)
{
  eeprom_write_UIntValue(66, 0, 8, val);
}

// Get BarometricSensorType (EnumValue)
// Byte offset: 66, bit offset: 0, length bits 8
static inline BarometricSensorTypeEnum e2p_envsensor_get_barometricsensortype(void)
{
  return eeprom_read_UIntValue8(66, 0, 8, 0, 255);
}

// BrightnessSensorType (EnumValue)
// Description: You can choose one of the supported light sensors.

typedef enum {
  BRIGHTNESSSENSORTYPE_NOSENSOR = 0,
  BRIGHTNESSSENSORTYPE_PHOTOCELL = 1
} BrightnessSensorTypeEnum;

// Set BrightnessSensorType (EnumValue)
// Byte offset: 67, bit offset: 0, length bits 8
static inline void e2p_envsensor_set_brightnesssensortype(BrightnessSensorTypeEnum val)
{
  eeprom_write_UIntValue(67, 0, 8, val);
}

// Get BrightnessSensorType (EnumValue)
// Byte offset: 67, bit offset: 0, length bits 8
static inline BrightnessSensorTypeEnum e2p_envsensor_get_brightnesssensortype(void)
{
  return eeprom_read_UIntValue8(67, 0, 8, 0, 255);
}

// DistanceSensorType (EnumValue)
// Description: Choose one of the connected distance sensor types.

typedef enum {
  DISTANCESENSORTYPE_NOSENSOR = 0,
  DISTANCESENSORTYPE_SRF02 = 1
} DistanceSensorTypeEnum;

// Set DistanceSensorType (EnumValue)
// Byte offset: 68, bit offset: 0, length bits 8
static inline void e2p_envsensor_set_distancesensortype(DistanceSensorTypeEnum val)
{
  eeprom_write_UIntValue(68, 0, 8, val);
}

// Get DistanceSensorType (EnumValue)
// Byte offset: 68, bit offset: 0, length bits 8
static inline DistanceSensorTypeEnum e2p_envsensor_get_distancesensortype(void)
{
  return eeprom_read_UIntValue8(68, 0, 8, 0, 255);
}

// Reserved area with 7640 bits


#endif /* _E2P_ENVSENSOR_H */
