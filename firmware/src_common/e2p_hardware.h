/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_HARDWARE_H
#define _E2P_HARDWARE_H

// E2P Block "Hardware"
// ====================
// Start offset (bit): 0
// Overall block length: 64 bits

// EnumValue DeviceType

typedef enum {
  DEVICETYPE_BASESTATION = 0,
  DEVICETYPE_TEMPSENSOR = 20,
  DEVICETYPE_POWERSWITCH = 40,
  DEVICETYPE_DIMMER = 60,
  DEVICETYPE_THERMOSTAT = 80
} DeviceTypeEnum;

// Set DeviceType (EnumValue)
// Byte offset: 0, bit offset: 0, length bits 8
static inline void e2p_hardware_set_devicetype(DeviceTypeEnum val)
{
  eeprom_write_UIntValue(0, 0, 8, val);
}

// Get DeviceType (EnumValue)
// Byte offset: 0, bit offset: 0, length bits 8
static inline DeviceTypeEnum e2p_hardware_get_devicetype(void)
{
  return eeprom_read_UIntValue8(0, 0, 8, 0, 255);
}

// UIntValue OsccalMode

// Set OsccalMode (UIntValue)
// Byte offset: 1, bit offset: 0, length bits 8, min val 0, max val 255
static inline void e2p_hardware_set_osccalmode(uint8_t val)
{
  eeprom_write_UIntValue(1, 0, 8, val);
}

// Get OsccalMode (UIntValue)
// Byte offset: 1, bit offset: 0, length bits 8, min val 0, max val 255
static inline uint8_t e2p_hardware_get_osccalmode(void)
{
  return eeprom_read_UIntValue8(1, 0, 8, 0, 255);
}

// Reserved area with 48 bits


#endif /* _E2P_HARDWARE_H */
