/*
* This file is part of smarthomatic, http://www.smarthomatic.org.
* Copyright (c) 2013 Uwe Freese
*
* smarthomatic is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* smarthomatic is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with smarthomatic. If not, see <http://www.gnu.org/licenses/>.
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* ! WARNING: This file is generated by the SHC EEPROM editor and should !
* ! never be modified manually.                                         !
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

#ifndef _E2P_POWERSWITCH_H
#define _E2P_POWERSWITCH_H

// E2P Block "PowerSwitch"
// =======================
// Start offset (bit): 512
// Overall block length: 7680 bits

// UIntValue SupportedSwitches

// Set SupportedSwitches (UIntValue)
// Byte offset: 64, bit offset: 0, length bits 8, min val 1, max val 1
static inline void e2p_powerswitch_set_supportedswitches(uint8_t val)
{
  eeprom_write_UIntValue(64, 0, 8, val);
}

// Get SupportedSwitches (UIntValue)
// Byte offset: 64, bit offset: 0, length bits 8, min val 1, max val 1
static inline uint8_t e2p_powerswitch_get_supportedswitches(void)
{
  return eeprom_read_UIntValue8(64, 0, 8, 1, 1);
}

// ByteArray SwitchState

#define EEPROM_SWITCHSTATE_BYTE 65
#define EEPROM_SWITCHSTATE_BIT 0
#define EEPROM_SWITCHSTATE_LENGTH_BYTES 16

// UIntValue BaseStationPacketCounter

// Set BaseStationPacketCounter (UIntValue)
// Byte offset: 81, bit offset: 0, length bits 24, min val 0, max val 16777215
static inline void e2p_powerswitch_set_basestationpacketcounter(uint32_t val)
{
  eeprom_write_UIntValue(81, 0, 24, val);
}

// Get BaseStationPacketCounter (UIntValue)
// Byte offset: 81, bit offset: 0, length bits 24, min val 0, max val 16777215
static inline uint32_t e2p_powerswitch_get_basestationpacketcounter(void)
{
  return eeprom_read_UIntValue32(81, 0, 24, 0, 16777215);
}

// Reserved area with 7520 bits


#endif /* _E2P_POWERSWITCH_H */
